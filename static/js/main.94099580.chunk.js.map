{"version":3,"sources":["Base.js","Auth.js","PrivateRoute.js","components/Formik/TextField.js","components/Login.js","components/Formik/SelectField.js","PositionValues.js","components/SignUp.js","components/Profile.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","useEffect","app","auth","onAuthStateChanged","Provider","value","PrivateRoute","RouteComponent","component","rest","useContext","render","routeProps","to","MyTextField","name","label","type","required","as","TextField","fullWidth","autoComplete","helperText","defaultProps","useStyles","makeStyles","theme","root","display","flexDirection","alignItems","justifyContent","height","maxWidth","backgroundColor","palette","background","paper","box","width","padding","form","margin","inputGroup","Login","history","classes","Container","className","Box","boxShadow","Typography","variant","align","color","initialValues","email","password","validationSchema","Yup","shape","onSubmit","values","action","a","signInWithEmailAndPassword","push","alert","formik","Button","disabled","isSubmitting","dirty","isValid","MySelectField","items","FormControl","InputLabel","Select","map","item","MenuItem","key","FormHelperText","alignSelf","flex","withRouter","surname","position","photoUrl","max","oneOf","resetForm","createUserWithEmailAndPassword","firestore","collection","doc","uid","set","createdAt","FieldValue","serverTimestamp","console","log","code","message","style","flexWrap","marginTop","backdrop","zIndex","Profile","props","data","setData","open","setOpen","setTimeout","get","then","exists","bgcolor","m","p","Backdrop","CircularProgress","enableReinitialize","setSubmitting","onClick","setShowProfile","marginLeft","Home","anchorEl","setAnchorEl","showProfile","handleClose","AppBar","Toolbar","IconButton","AccountCircle","aria-controls","aria-haspopup","event","currentTarget","Menu","id","keepMounted","Boolean","onClose","signOut","App","basename","exact","path","SignupForm","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.94099580.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nfirebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n});\r\n\r\nexport default firebase;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport app from \"./Base\";\r\n\r\nexport const AuthContext = React.createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    app.auth().onAuthStateChanged(setCurrentUser);\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"./Auth\";\r\n\r\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) =>\r\n        currentUser ? (\r\n          <RouteComponent {...routeProps} />\r\n        ) : (\r\n          <Redirect to={\"/login\"} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\n// Material UI field mixed with Formik Field\r\nexport const MyTextField = ({ name, label, type, required = false }) => {\r\n  return (\r\n    <Field\r\n      as={TextField}\r\n      required={required}\r\n      name={name}\r\n      label={label}\r\n      fullWidth\r\n      type={type}\r\n      autoComplete=\"false\"\r\n      helperText={<ErrorMessage name={name} />}\r\n    />\r\n  );\r\n};\r\n\r\n// Type checking\r\nMyTextField.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n};\r\n\r\n// default props\r\nMyTextField.defaultProps = {\r\n  type: \"text\",\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nimport { Formik, Form } from \"formik\";\r\nimport { MyTextField } from \"./Formik/TextField\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport {\r\n  Button,\r\n  makeStyles,\r\n  Container,\r\n  Typography,\r\n  Box,\r\n} from \"@material-ui/core\";\r\n\r\nimport app from \"./../Base\";\r\nimport { AuthContext } from \"./../Auth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"100vh\",\r\n    maxWidth: \"400px\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  box: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"100%\",\r\n    height: \"300px\",\r\n    padding: \"30px 0\",\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    margin: \"5px 0 30px 0\",\r\n    padding: \"0 15px\",\r\n  },\r\n  inputGroup: {\r\n    margin: \"5px 0\",\r\n  },\r\n}));\r\n\r\nconst Login = ({ history }) => {\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Box boxShadow={3} className={classes.box}>\r\n        <Typography variant=\"h3\" align=\"center\" color=\"inherit\">\r\n          Login\r\n        </Typography>\r\n        <Formik\r\n          initialValues={{\r\n            email: \"\",\r\n            password: \"\",\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            email: Yup.string().email(\"Invalid Email\").required(\"Required\"),\r\n            password: Yup.string().required(\"Required\"),\r\n          })}\r\n          onSubmit={async (values, action) => {\r\n            try {\r\n              await app\r\n                .auth()\r\n                .signInWithEmailAndPassword(values.email, values.password);\r\n              history.push(\"/\");\r\n            } catch (error) {\r\n              alert(error);\r\n            }\r\n          }}\r\n        >\r\n          {(formik) => {\r\n            if (currentUser) {\r\n              return <Redirect to=\"/\" />;\r\n            }\r\n\r\n            return (\r\n              <Form className={classes.form}>\r\n                <div className={classes.inputGroup}>\r\n                  <MyTextField name=\"email\" label=\"Email\" type=\"email\" />\r\n                </div>\r\n                <div className={classes.inputGroup}>\r\n                  <MyTextField\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                  />\r\n                </div>\r\n                <Button\r\n                  type=\"submit\"\r\n                  disabled={\r\n                    formik.isSubmitting || !formik.dirty || !formik.isValid\r\n                  }\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  LOGIN\r\n                </Button>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n        <Typography variant=\"caption\" color=\"inherit\" align=\"center\">\r\n          <Link to=\"/signup\">Don't have an account? Sign Up</Link>\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\n// Material UI field mixed with Formik Field\r\nexport const MySelectField = ({ name, label, items, required = false }) => {\r\n  return (\r\n    <FormControl fullWidth required={required}>\r\n      <InputLabel>{label}</InputLabel>\r\n      <Field as={Select} name={name}>\r\n        {items.map((item) => (\r\n          <MenuItem key={item.value} value={item.value}>\r\n            {item.label}\r\n          </MenuItem>\r\n        ))}\r\n      </Field>\r\n      <FormHelperText>{<ErrorMessage name={name} />}</FormHelperText>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n// Prop checking\r\nMySelectField.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n","export const items = [\r\n  {\r\n    label: \"Front End\",\r\n    value: \"front_end\",\r\n  },\r\n  {\r\n    label: \"Back-End\",\r\n    value: \"back_end\",\r\n  },\r\n  {\r\n    label: \"Devops\",\r\n    value: \"devops\",\r\n  },\r\n  {\r\n    label: \"QA\",\r\n    value: \"qa\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport {\r\n  Button,\r\n  makeStyles,\r\n  Container,\r\n  Box,\r\n  Typography,\r\n  useMediaQuery,\r\n} from \"@material-ui/core\";\r\n\r\nimport app from \"./../Base\";\r\n\r\nimport { MyTextField } from \"./Formik/TextField\";\r\nimport { MySelectField } from \"./Formik/SelectField\";\r\nimport { items } from \"../PositionValues\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    height: \"100vh\",\r\n    maxWidth: \"600px\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  box: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"100%\",\r\n    padding: \"30px 0\",\r\n  },\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    margin: \"5px 0 30px 0\",\r\n    padding: \"0 15px\",\r\n    \"& button\": {\r\n      margin: \"5px\",\r\n      [\"@media (min-width:600px)\"]: {\r\n        alignSelf: \"flex-end\",\r\n      },\r\n    },\r\n  },\r\n  inputGroup: {\r\n    margin: \"5px\",\r\n    flex: \"1, 1, 100px\",\r\n  },\r\n}));\r\n\r\nconst SignupForm = ({ history }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Container className={classes.root}>\r\n      <Box boxShadow={3} className={classes.box}>\r\n        <Typography variant=\"h3\" align=\"center\" color=\"inherit\">\r\n          Sign Up\r\n        </Typography>\r\n        <Formik\r\n          initialValues={{\r\n            name: \"\",\r\n            surname: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            position: \"\",\r\n            photoUrl: \"\",\r\n          }}\r\n          validationSchema={Yup.object({\r\n            name: Yup.string()\r\n              .required(\"Required\")\r\n              .max(15, \"Max 15 characters\"),\r\n            surname: Yup.string()\r\n              .required(\"Required\")\r\n              .max(20, \"Max 20 characters\"),\r\n            email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n            password: Yup.string().required(\"Required\"),\r\n            position: Yup.string()\r\n              .oneOf([\"front_end\", \"back_end\", \"devops\", \"qa\"])\r\n              .required(\"Required\"),\r\n          })}\r\n          onSubmit={async (values, { resetForm }) => {\r\n            try {\r\n              // Create the authentication user\r\n              await app\r\n                .auth()\r\n                .createUserWithEmailAndPassword(values.email, values.password);\r\n\r\n              // Save user to Firestore\r\n              await app\r\n                .firestore()\r\n                .collection(\"users\")\r\n                .doc(app.auth().currentUser.uid)\r\n                .set({\r\n                  name: values.name,\r\n                  surname: values.surname,\r\n                  email: values.email,\r\n                  position: values.position,\r\n                  createdAt: app.firestore.FieldValue.serverTimestamp(),\r\n                });\r\n\r\n              // Reset form\r\n              resetForm();\r\n\r\n              // Redirect to Home\r\n              history.push(\"/\");\r\n            } catch (error) {\r\n              console.log(error, error.code, error.message);\r\n            }\r\n          }}\r\n        >\r\n          {(formik) => {\r\n            return (\r\n              <Form className={classes.form}>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexWrap: \"wrap\",\r\n                  }}\r\n                >\r\n                  <div style={{ flex: \"1 1 150px\", margin: \"5px\" }}>\r\n                    <MyTextField name=\"name\" label=\"Name\" required />\r\n                  </div>\r\n                  <div style={{ flex: \"1 1 200px\", margin: \"5px\" }}>\r\n                    <MyTextField name=\"surname\" label=\"Surname\" required />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className={classes.inputGroup}>\r\n                  <MyTextField\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    type=\"email\"\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div className={classes.inputGroup}>\r\n                  <MyTextField\r\n                    name=\"password\"\r\n                    label=\"password\"\r\n                    type=\"password\"\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <div className={classes.inputGroup}>\r\n                  <MySelectField\r\n                    name=\"position\"\r\n                    label=\"Position\"\r\n                    items={items}\r\n                    required\r\n                  />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  disabled={\r\n                    !formik.dirty || !formik.isValid || formik.isSubmitting\r\n                  }\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n        <Typography variant=\"caption\" color=\"inherit\" align=\"center\">\r\n          <Link to=\"/login\">Already have an account? Login</Link>\r\n        </Typography>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default withRouter(SignupForm);\r\n","import \"typeface-roboto\";\r\n\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\n\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {\r\n  Typography,\r\n  Button,\r\n  CircularProgress,\r\n  Backdrop,\r\n  makeStyles,\r\n  Container,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Formik, Form } from \"formik\";\r\nimport { MyTextField } from \"./Formik/TextField\";\r\nimport { MySelectField } from \"./Formik/SelectField\";\r\n\r\nimport { items } from \"../PositionValues\";\r\n\r\nimport { AuthContext } from \"./../Auth\";\r\nimport app from \"./../Base\";\r\n\r\n//------\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    position: \"relative\",\r\n    maxWidth: \"600px\",\r\n    margin: \"0 auto\",\r\n    marginTop: \"50px\",\r\n  },\r\n\r\n  backdrop: {\r\n    position: \"absolute\",\r\n    zIndex: 999,\r\n  },\r\n}));\r\n\r\nconst Profile = (props) => {\r\n  const [data, setData] = useState({});\r\n  const [open, setOpen] = useState(true);\r\n\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setOpen(false);\r\n    }, 2000);\r\n  }, []);\r\n\r\n  // get user info from firestore\r\n  useEffect(() => {\r\n    app\r\n      .firestore()\r\n      .collection(\"users\")\r\n      .doc(app.auth().currentUser.uid)\r\n      .get()\r\n      .then((doc) => {\r\n        if (!doc.exists) {\r\n          return;\r\n        }\r\n\r\n        setData(doc.data(), () => {\r\n          setOpen(false);\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Box\r\n        boxShadow={3}\r\n        bgcolor=\"background.paper\"\r\n        m={1}\r\n        p={3}\r\n        className={classes.box}\r\n      >\r\n        <Backdrop open={open} className={classes.backdrop}>\r\n          <CircularProgress />\r\n        </Backdrop>\r\n        <Typography variant=\"h3\" color=\"inherit\" align=\"center\">\r\n          Profile\r\n        </Typography>\r\n        <div>\r\n          <Formik\r\n            enableReinitialize={true}\r\n            initialValues={{\r\n              name: data.name || \"\",\r\n              surname: data.surname || \"\",\r\n              email: data.email || \"\",\r\n              position: data.position || \"\",\r\n            }}\r\n            onSubmit={async (values, { setSubmitting }) => {\r\n              setSubmitting(true);\r\n\r\n              /* Update data on Firestore */\r\n              await app\r\n                .firestore()\r\n                .collection(\"users\")\r\n                .doc(currentUser.uid)\r\n                .set(values)\r\n                .then(() => {\r\n                  app\r\n                    .firestore()\r\n                    .collection(\"users\")\r\n                    .doc(currentUser.uid)\r\n                    .get()\r\n                    .then((doc) => {\r\n                      if (!doc.exists) {\r\n                        return;\r\n                      }\r\n                      setData(doc.data(), () => {\r\n                        setSubmitting(false);\r\n                      });\r\n                    });\r\n                });\r\n            }}\r\n          >\r\n            {(formik) => (\r\n              <Form style={{ marginTop: \"15px\" }}>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexWrap: \"wrap\",\r\n                  }}\r\n                >\r\n                  <div style={{ flex: \"1 1 150px\", margin: \"5px\" }}>\r\n                    <MyTextField name=\"name\" label=\"Name\" />\r\n                  </div>\r\n                  <div style={{ flex: \"1 1 200px\", margin: \"5px\" }}>\r\n                    <MyTextField name=\"surname\" label=\"Surname\" />\r\n                  </div>\r\n                </div>\r\n                <div style={{ margin: \"5px\" }}>\r\n                  <MyTextField name=\"email\" label=\"Email\" />\r\n                </div>\r\n                <div style={{ margin: \"5px\" }}>\r\n                  <MySelectField\r\n                    name=\"position\"\r\n                    label=\"Position\"\r\n                    items={items}\r\n                  />\r\n                </div>\r\n\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"flex-start\",\r\n                    justifyContent: \"flex-end\",\r\n                  }}\r\n                >\r\n                  <div style={{ marginTop: \"15px\" }}>\r\n                    <Button\r\n                      variant=\"text\"\r\n                      color=\"default\"\r\n                      name=\"close\"\r\n                      onClick={() => props.setShowProfile(false)}\r\n                    >\r\n                      CLOSE\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      name=\"save\"\r\n                      style={{ marginLeft: \"5px\" }}\r\n                      disabled={\r\n                        !formik.dirty || !formik.isValid || formik.isSubmitting\r\n                      }\r\n                    >\r\n                      {formik.isSubmitting ? \"SAVING...\" : \"SAVE\"}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { useState } from \"react\";\r\n\r\nimport app from \"../Base\";\r\nimport Profile from \"./Profile\";\r\n\r\nimport { AccountCircle } from \"@material-ui/icons\";\r\nimport {\r\n  Typography,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\n//------\r\n\r\nconst Home = () => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [showProfile, setShowProfile] = useState(false);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar color=\"primary\" position=\"static\" fullWidth>\r\n        <Toolbar>\r\n          <Typography variant=\"subtitle2\" color=\"inherit\" style={{ flex: 1 }}>\r\n            {`CRUD APP`}\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <AccountCircle\r\n              aria-controls=\"simple-menu\"\r\n              aria-haspopup=\"true\"\r\n              color=\"inherit\"\r\n              onClick={handleClick}\r\n            />\r\n\r\n            <Menu\r\n              id=\"simple-menu\"\r\n              anchorEl={anchorEl}\r\n              keepMounted\r\n              open={Boolean(anchorEl)}\r\n              onClose={handleClose}\r\n            >\r\n              <MenuItem\r\n                onClick={() => {\r\n                  setShowProfile(true);\r\n                  handleClose();\r\n                }}\r\n              >\r\n                My account\r\n              </MenuItem>\r\n              <MenuItem\r\n                onClick={() => {\r\n                  app.auth().signOut();\r\n                }}\r\n              >\r\n                Logout\r\n              </MenuItem>\r\n            </Menu>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {showProfile && <Profile setShowProfile={setShowProfile} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\n\r\nimport { AuthProvider } from \"./Auth\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\n\r\nimport Login from \"./components/Login\";\r\nimport SignupForm from \"./components/SignUp\";\r\nimport Home from \"./components/Home\";\r\n\r\nconst App = () => (\r\n  <AuthProvider>\r\n    <Router basename=\"/\">\r\n      <PrivateRoute exact path=\"/\" component={Home} />\r\n      <Route exact path=\"/login\" component={Login} />\r\n      <Route exact path=\"/signup\" component={SignupForm} />\r\n    </Router>\r\n  </AuthProvider>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"typeface-roboto\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}