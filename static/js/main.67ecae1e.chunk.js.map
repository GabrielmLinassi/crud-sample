{"version":3,"sources":["Base.js","Auth.js","PrivateRoute.js","components/Formik/TextField.js","components/Login.js","components/Formik/SelectField.js","PositionValues.js","components/SignUp.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["app","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","useEffect","auth","onAuthStateChanged","Provider","value","PrivateRoute","RouteComponent","component","rest","useContext","render","routeProps","to","MyTextField","name","label","type","as","TextField","required","fullWidth","autoComplete","helperText","defaultProps","Login","history","className","initialValues","email","password","validationSchema","Yup","shape","onSubmit","values","action","a","signInWithEmailAndPassword","push","alert","formik","Button","disabled","isSubmitting","dirty","isValid","variant","color","MySelectField","items","FormControl","InputLabel","Select","map","item","MenuItem","key","FormHelperText","withRouter","surname","position","max","oneOf","resetForm","createUserWithEmailAndPassword","Home","onClick","signOut","App","basename","exact","path","SignupForm","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67ecae1e.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n});\r\n\r\nexport default app;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport app from \"./Base\";\r\n\r\nexport const AuthContext = React.createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    app.auth().onAuthStateChanged(setCurrentUser);\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"./Auth\";\r\n\r\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\r\n  const { currentUser } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) =>\r\n        currentUser ? (\r\n          <RouteComponent {...routeProps} />\r\n        ) : (\r\n          <Redirect to={\"/login\"} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n// Material UI field mixed with Formik Field\r\nexport const MyTextField = ({ name, label, type }) => (\r\n  <Field\r\n    as={TextField}\r\n    required\r\n    name={name}\r\n    label={label}\r\n    fullWidth\r\n    type={type}\r\n    autoComplete=\"false\"\r\n    helperText={<ErrorMessage name={name} />}\r\n  />\r\n);\r\n\r\n// Type checking\r\nMyTextField.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n};\r\n\r\n// default props\r\nMyTextField.defaultProps = {\r\n  type: \"text\",\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Formik, Form } from \"formik\";\r\nimport { MyTextField } from \"./Formik/TextField\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport app from \"./../Base\";\r\nimport { AuthContext } from \"./../Auth\";\r\n\r\nconst Login = ({ history }) => {\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Login</h1>\r\n      <Formik\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          email: Yup.string().email(\"Invalid Email\").required(\"Required\"),\r\n          password: Yup.string().required(\"Required\"),\r\n        })}\r\n        onSubmit={async (values, action) => {\r\n          try {\r\n            await app\r\n              .auth()\r\n              .signInWithEmailAndPassword(values.email, values.password);\r\n            history.push(\"/\");\r\n          } catch (error) {\r\n            alert(error);\r\n          }\r\n        }}\r\n      >\r\n        {(formik) => {\r\n          const { currentUser } = useContext(AuthContext);\r\n\r\n          if (currentUser) {\r\n            return <Redirect to=\"/\" />;\r\n          }\r\n\r\n          return (\r\n            <Form>\r\n              <MyTextField name=\"email\" label=\"Email\" type=\"email\" />\r\n              <MyTextField name=\"password\" label=\"Password\" type=\"password\" />\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={\r\n                  formik.isSubmitting || !formik.dirty || !formik.isValid\r\n                }\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                LOGIN\r\n              </Button>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n      <Link to=\"/signup\">Don't have an account? Sign Up</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\n\r\n// Material UI field mixed with Formik Field\r\nexport const MySelectField = ({ name, label, items }) => {\r\n  return (\r\n    <FormControl fullWidth>\r\n      <InputLabel>{label}</InputLabel>\r\n      <Field as={Select} name={name}>\r\n        {items.map((item) => (\r\n          <MenuItem key={item.value} value={item.value}>\r\n            {item.label}\r\n          </MenuItem>\r\n        ))}\r\n      </Field>\r\n      <FormHelperText>{<ErrorMessage name={name} />}</FormHelperText>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\n// Prop checking\r\nMySelectField.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      value: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\n","export const items = [\r\n  {\r\n    label: \"Front End\",\r\n    value: \"front_end\",\r\n  },\r\n  {\r\n    label: \"Back-End\",\r\n    value: \"back_end\",\r\n  },\r\n  {\r\n    label: \"Devops\",\r\n    value: \"devops\",\r\n  },\r\n  {\r\n    label: \"QA\",\r\n    value: \"qa\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport app from \"./../Base\";\r\n\r\nimport { MyTextField } from \"./Formik/TextField\";\r\nimport { MySelectField } from \"./Formik/SelectField\";\r\nimport { items } from \"../PositionValues\";\r\n\r\nconst SignupForm = ({ history }) => {\r\n  return (\r\n    <div className=\"app\">\r\n      <h1>Sign Up</h1>\r\n      <Formik\r\n        initialValues={{\r\n          name: \"\",\r\n          surname: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          position: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          name: Yup.string().required(\"Required\").max(15, \"Max 15 characters\"),\r\n          surname: Yup.string()\r\n            .required(\"Required\")\r\n            .max(20, \"Max 20 characters\"),\r\n          email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n          password: Yup.string().required(\"Required\"),\r\n          position: Yup.string()\r\n            .oneOf([\"front_end\", \"back_end\", \"devops\", \"qa\"])\r\n            .required(\"Required\"),\r\n        })}\r\n        onSubmit={async (values, { resetForm }) => {\r\n          try {\r\n            await app\r\n              .auth()\r\n              .createUserWithEmailAndPassword(values.email, values.password);\r\n            resetForm();\r\n            history.push(\"/\");\r\n          } catch (error) {\r\n            alert(error);\r\n          }\r\n        }}\r\n      >\r\n        {(formik) => {\r\n          return (\r\n            <Form>\r\n              <MyTextField name=\"name\" label=\"Name\" />\r\n              <MyTextField name=\"surname\" label=\"Surname\" />\r\n              <MyTextField name=\"email\" label=\"Email\" type=\"email\" />\r\n              <MyTextField name=\"password\" label=\"password\" type=\"password\" />\r\n              <MySelectField name=\"position\" label=\"Position\" items={items} />\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={\r\n                  !formik.dirty || !formik.isValid || formik.isSubmitting\r\n                }\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n      <Link to=\"/login\">Already have an account? Login</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(SignupForm);\r\n","import React from \"react\";\r\nimport app from \"../Base\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <>\r\n      <h1>Dashboard</h1>\r\n      <button\r\n        onClick={() => {\r\n          app.auth().signOut();\r\n        }}\r\n      >\r\n        Sign Out\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport { AuthProvider } from \"./Auth\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nimport Login from \"./components/Login\";\nimport SignupForm from \"./components/SignUp\";\nimport Home from \"./components/Home\";\n\nconst App = () => (\n  <AuthProvider>\n    <Router basename=\"/\">\n      <PrivateRoute exact path=\"/\" component={Home} />\n      <Route exact path=\"/login\" component={Login} />\n      <Route exact path=\"/signup\" component={SignupForm} />\n    </Router>\n  </AuthProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"typeface-roboto\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}